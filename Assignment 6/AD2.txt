bool hasEvenParity(int n) {
    int count = 0;
    unsigned int num = n; 

    while (num > 0) {
        if (num & 1) { 
            count++;
        }
        num >>= 1; 
    }

    return (count % 2 == 0); 
}
void removeEvenNodes() {
    Node* temp = head;
    while (temp != NULL) {
        Node* nextNode = temp->next; 

        if (hasEvenParity(temp->data)) { 
            if (temp->prev != NULL) {
                temp->prev->next = temp->next;
            }
            
            if (temp->next != NULL) {
                temp->next->prev = temp->prev;
            }
            
            if (temp == head) {
                head = temp->next;
            }
            
            delete temp;
        }
        temp = nextNode; 
    }
}

void removeEvenNodes() {
    if (last == NULL) {
        return;
    }

    Node* curr = last->next; 
    Node* prev = last;
    Node* head = last->next; 

    bool headProcessed = false;
    
    if (curr->next == curr && hasEvenParity(curr->data)) {
         delete curr;
         last = NULL;
         return;
    }

    while (true) {
        if (curr == head && headProcessed) {
            break; 
        }
        if (curr != head) {
            headProcessed = true; 
        }

        Node* nextNode = curr->next;

        if (hasEvenParity(curr->data)) {
            prev->next = nextNode;

            if (curr == last->next) { 
                last->next = nextNode;
                head = nextNode; 
            }
            if (curr == last) { 
                last = prev;
            }
            
            delete curr;
            curr = nextNode;
        } else {
            prev = curr;
            curr = nextNode;
        }
    }
}